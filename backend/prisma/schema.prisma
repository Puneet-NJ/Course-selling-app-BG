// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String

  purchases Purchases[]
}

model Course_Creator {
  id String @id @default(uuid())
  name String
  email String @unique
  password String

  courses Courses[]
}

model Courses {
  id  String @id @default(uuid())
  name String
  description String
  price Int
  imageUrl String
  isUploaded Boolean @default(true)

  creatorId String
  creator Course_Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  purchases Purchases[]

  courseFolders CourseFolder[]
}

model CourseFolder {
  id  String @id @default(uuid())
  name String 

  courseId String 
  course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, name])

  courseContents CourseContent[]
}

model CourseContent {
  id  String @id @default(uuid())
  name String 

  courseFolderId String
  courseFolder CourseFolder @relation(fields: [courseFolderId], references: [id], onDelete: Cascade)

  status ContentStatus @default(PENDING)

  @@unique([courseFolderId, name]) // ensures the combination of courseFolderId & name are not repeated
}

model Purchases {
  id String @id @default(uuid())

  userId  String 
  user User @relation(references: [id], fields: [userId])

  courseId  String
  Course Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum ContentStatus {
  PROCESSING
  PROCESSED
  PENDING
  FAILED
}